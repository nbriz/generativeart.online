{
  "basic-copies": [
    {
      "name": "CHR$()",
      "code": "<link rel=\"stylesheet\" href=\"https://generativeart.online/css/10print.css\">\n<script>\n  \nfunction CHR$ (n) {\n  return String.fromCharCode(n)\n}\n\nfunction animate () {\n  const num = 9585 + Math.round(Math.random())\n  document.body.innerText += CHR$(num)\n}\n\nsetInterval(animate, 10)\n  \n<\/script>",
      "text": "As another example, maybe we want to create a version of 10 print in JavaScript that resembles as much as possible the original version written in BASIC. In the BASIC version, rather than using string values for the characters, a function called <code>CHR$()</code> is used, there is a similar function in JavaScript called <code>String.fromCharCode()</code> which we can use to create our own \"CHR$\" function. <br><br>The original CHR$ function would take a numerical value representing the character you want, in the case of the Commodore 64 and PET, these were encoded in <a href=\"https://en.wikipedia.org/wiki/PETSCII\" target=\"_blank\">PETSCII</a>. Most computers today use ASCII and/or <a href=\"https://en.wikipedia.org/wiki/List_of_Unicode_characters\" target=\"_blank\">Unicode</a> which not only contains a much larger character set, but is also a different mapping of numerical values to corresponding characters. Which means rather than starting with the value <code>205.5</code> and randomly choosing to round that up or down (the values 205 and 206 representing the slashes in PETSCII) we'd use the values 9585 and 9586, which are those longer box diagonal characters in Unicode."
    },
    {
      "name": "RND()",
      "code": "<link rel=\"stylesheet\" href=\"https://generativeart.online/css/10print.css\">\n<script>\n  \nfunction CHR$ (n) {\n  return String.fromCharCode(n)\n}\n\nfunction RND (n) {\n  return Math.round(Math.random() * n)\n}\n\nfunction animate () {\n  const num = 9585 + RND(1)\n  document.body.innerText += CHR$(num)\n}\n\nsetInterval(animate, 10)\n\n</script>",
      "text": "In the original BASIC version the random function is <code>RND()</code>, we could also create a function with that name in JavaScript which abstracts our <code>Math.random()</code> logic."
    },
    {
      "name": "PRINT()",
      "code": "<link rel=\"stylesheet\" href=\"https://generativeart.online/css/10print.css\">\n<script>\n  \nfunction CHR$ (n) {\n  return String.fromCharCode(n)\n}\n\nfunction RND (n) {\n  return Math.round(Math.random() * n)\n}\n\nfunction PRINT (c) {\n  document.body.innerText += c\n}\n\nfunction animate () {\n  const num = 9585 + RND(1)\n  PRINT(CHR$(num))\n}\n\nsetInterval(animate, 10)\n\n</script>",
      "text": "As with our <code>p</code> function in the other examples above, we can abstract the logic of writing a character to our body into a function as well, except this time we'll call it <code>PRINT</code> to match the equivalent function name from the BASIC version."
    },
    {
      "name": "PRINT(CHR$(9585 + RND(1)))",
      "code": "<link rel=\"stylesheet\" href=\"https://generativeart.online/css/10print.css\">\n<script>\n  \nfunction CHR$ (n) {\n  return String.fromCharCode(n)\n}\n\nfunction RND (n) {\n  return Math.round(Math.random() * n)\n}\n\nfunction PRINT (c) {\n  document.body.innerText += c\n}\n\nfunction animate () {\n  PRINT(CHR$(9585 + RND(1)))\n}\n\nsetInterval(animate, 10)\n\n</script>",
      "text": "We could at this point write our animate function's logic in one line that more closely resembles the original BASIC program. To be clear, there is no <i>functional</i> or <i>technical</i> reason for having done all this, there is only a <i>formal</i> or <i>aesthetic</i> reason. Here we're not talking about the aesthetics of the output, but the aesthetics of the code itself."
    },
    {
      "name": "arrow functions",
      "code": "<link rel=\"stylesheet\" href=\"https://generativeart.online/css/10print.css\">\n<script>\n  \nconst CHR$ = (n) => String.fromCharCode(n)\n\nconst RND = n => Math.round(Math.random() * n)\n\nconst PRINT = c => document.body.innerText += c\n\nconst animate = () => PRINT(CHR$(9585 + RND(1)))\n\nsetInterval(animate, 10)\n\n</script>",
      "text": "Now, because all of our function are one-liners, we could write them in one line by using the arrow function syntax discussed earlier in the examples above these."
    },
    {
      "name": "final version",
      "code": "<link rel=\"stylesheet\" href=\"https://generativeart.online/css/10print.css\">\n<script>\n  \nconst CHR$ = (n) => String.fromCharCode(n)\n\nconst RND = n => Math.round(Math.random() * n)\n\nconst PRINT = c => document.body.innerText += c\n\nsetInterval(() => PRINT(CHR$(9585 + RND(1))), 10)\n\n</script>",
      "text": "Lastly, rather than storing our BASIC looking code in a named function called \"animate\" and passing in a refernce to that function as the first argument of our setInterval. We could pass the value of that function itself directly into the setInterval. When we pass a function, which was not given a name, into a function like this it's called an \"anonymous function\"."
    }
  ]
}
