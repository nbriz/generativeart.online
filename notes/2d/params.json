{
  "params": [
    {
      "name": "location.reload()",
      "code": "<script>\n\nlocation.reload()\n\nlog('page will refresh before this logs!')\n  \n</script>",
      "text": "The Web's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location\" target=\"_blank\">Location API</a> (not to be confused with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API\" target=\"_blank\">Geolocation API</a>) gives you access to the <code>location</code> object which contains various properties and methods for interacting with the current tab's \"location\", ie. the address bar. For example the <code>location.reload()</code> method refreshes the page, click \"run code\" to see it in action."
    },
    {
      "name": "location properties",
      "code": "<script>\n\nlog(location.href) // the full URL\nlog(location.protocol) // just the protocol\nlog(location.hostname) // just the domain name\nlog(location.pathname) // the path following the domain name\n  \n</script>",
      "text": "Like objects, we can create arrays with data in them to start. But unlike objects, the data aren't stored in key/value pairs, instead array's are simply a list of comma separated values. To access a piece of data we must use the bracket <code>[]</code> syntax, passing in the <i>index</i> number (or position in the list) of the item we want, starting from 0. We can reassign a particular item in the array using this way as well.<br><br>It's also worth noting, that although in this example the values in the array are all strings, you can technically store any combination of values (of any data type) in arrays, for example <code>const c = [1, 'hi', true]</code>"
    },
    {
      "name": "location.hash",
      "code": "<script>\n\nlog(location.hash)\n  \n</script>",
      "text": "One way developers create URLs which navigate to a specific part of the page is that they assign an <code>id</code> to an element in their HTML code, and then add the value of that id after the <code>#</code> symbol at the end of the URL. This is why visiting <a href=\"https://en.wikipedia.org/wiki/Generative_art\" target=\"_blank\">https://en.wikipedia.org/wiki/Generative_art</a> takes you to the top of the wikipedia page on Generative Art (the default) where as <a href=\"https://en.wikipedia.org/wiki/Generative_art#Software_art\" target=\"_blank\">https://en.wikipedia.org/wiki/Generative_art#Software_art</a> takes you to the same page scrolled down to the \"Software art\" section. If you use your browser developer tools to \"inspect\" the title element (right click the title \"Software art\" in that wikipedia page and choose \"inspect\") you'll notice that it has an id matching the value of the hash in the URL.<br><br>While that's the most conventional use of the hash, you also have access to this value in JavaScript using <code>location.hash</code>. Add (and importantly \"Enter\") a hash to the URL of this page then click \"run code\"."
    },
    {
      "name": "location.hash logic",
      "code": "<script>\n\nconst hash = location.hash\n\nif (hash) {\n  // remove # symbol\n  const bg = hash.replace('#', '')\n  // use value to update body's bg color\n  document.body.style.backgroundColor = bg\n  \n  log(`background is now: ${bg}`)\n}\n\n  \n</script>",
      "text": "For example, we can use the value of the hash to change the page's background color. Add and enter <code>#red</code> (or some other valid HTML color name) to the URL of this page. Then return to this example and run the code."
    },
    {
      "name": "location.search",
      "code": "<script>\n\nlog(location.search)\n  \n</script>",
      "text": "Another, more versatile, way to add values to our URL is using URL parameters also known as query strings. These allow you to add as many key/value pairs to the URL as you'd like. The keys and values are separated with equal signs like <code>color=red</code>, the first parameter must always start with a <code>?</code> and every subsequent parameter should start with a <code>amp;</code>. For example try adding and entering <i>?color=red&bg=black</i> to this page's URL and then return to this example to run the code."
    },
    {
      "name": "URLSearchParams",
      "code": "<script>\n\nconst params = new URLSearchParams(location.search)\nconst color = params.get('color')\nconst bg = params.get('bg')\n\nif (color) {\n  document.body.style.color = color\n}\n  \nif (bg) {\n  document.body.style.backgroundColor = bg\n}\n  \nlog(`color: ${color}, bg: ${bg}`)\n  \n</script>",
      "text": "Using the Web's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" target=\"_blank\">URLSearchParams</a> API we can easily parse this <code>location.search</code> string in a number of useful ways. The simplest example is using the <code>.get()</code> method to pull the value of any particular URL param."
    }
  ]
}
